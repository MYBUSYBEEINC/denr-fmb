
ï»¿@using System.Security.Claims;
@model FMB_CIS.Models.ViewModel

@{
    Layout = "~/Views/Shared/_MainPageLayout.cshtml";
    ViewBag.Title = "New Chainsaw Owner Permit Application";
}


<div id="card-container">
    <div id="card">
        @if (ViewBag.message != null)
        {
            <div class="alert alert-success" role="alert">
                @ViewBag.message
            </div>
        }
        <form asp-action="Index" method="post" enctype="multipart/form-data" id="OwnerRegForm">
        <a href="@Url.Action("Index", "Dashboard")" class="mx-2" title="back"><i data-feather="arrow-left" class="text-secondary backBtn"></i></a>
        <div class="row m-0 my-4">
            <div class="col-md-12">
                <div class="p-4 shadow h-100">
                    <h2 class="text-secondary fw-bold mb-4">Permit</h2>
                    <div class="form-group mb-3">
                        <label class="text-secondary fw-bold">
                            Permit Type
                        </label>
                            <select class="form-select" asp-for="tbl_Application.tbl_permit_type_id" aria-label="Permit Type" onchange="permitSelection(this)" required>
                                <option value="" selected disabled>- Select Permit Type -</option>
                                <option value="5">Authority to Lease</option>
                                <option value="6">Authority to Rent</option>
                                <option value="7">Authority to Lend</option>
                                <option value="14">Permit to Re-sell/Transfer Ownership</option>
                            </select>
                    </div>
                    <div class="form-group mb-3" id="NewEmailAddress" style="display: none;">
                        <label class="text-secondary fw-bold">
                            Email Address of new owner
                        </label>
                            <input type="text" asp-for="tbl_Application.new_email_address" class="form-control" placeholder="Enter email address of new owner" />
                        <span class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

         <table class="table" id="applicationTable">
                <!-- Table headers -->
                <thead>
                    <tr>
                        @*   <th>ID</th>*@
                        <th>Supplier Name</th>
                        <th>Supplier Address</th>
                        <th>Expected Time Of Arrival</th>
                        <th>PowerSource</th>
                        <th>UnitOfMeasure</th>
                        <th>Brand</th>
                        <th>Model</th>
                        <th>EngineSerialNo</th>
                        <th>Quantity</th>
                        <!-- ... Other headers ... -->
                        <th>Actions</th>
                    </tr>
                </thead>
                <!-- Table body for displaying and editing data -->
                <tbody id="tableBody">
                    <!-- Rows with data will be dynamically added here -->
                    @* @foreach (tbl_application_group item in Model.tbl_Application_Group)
                    {
                    //    var folder = Model.uid + "_" + Model.appid;
                    @Html.EditorFor(item => item.SupplierName)
                    @Html.EditorFor(item => .Property2)
                    }*@


                </tbody>

                <!-- Inline add row -->
                <tfoot>
                    <tr id="addRow" style="display:none;">
                        <td><input type="text" id="newId" /></td>
                        <td><input type="text" id="newSupplierName" /></td>
                        <td><input type="datetime-local" id="newExpectedTimeArrival" /></td>
                        <!-- ... Other fields ... -->
                        <td>
                            <button id="addRowButton" type="button">Add</button>
                        </td>
                    </tr>
                </tfoot>
            </table>

            <input type="file" asp-for="tbl_Application_Group" multiple hidden />

            <div class="row m-0 mb-4">
                <div class="col-md-12" style="padding-top: 40px;">
                    <button id="showAddRowButton" type="button" class="btn btn-primary w-125" style="float:right;">Add Supplier</button>
                </div>
            </div>
            <input type="text" asp-for="Dataxxx" multiple hidden />




            <div class="row m-0 mb-4">
                <div class="col-md-12">
                    <div class="p-4 shadow h-100">
                        <div class="mb-4" style="display:none" id="PermitToLeaseRentLendRequirements">
                            <span style="white-space: pre-line">@ViewBag.RequiredDocsList_PermitToLeaseRentLend</span>
                        </div>
                        <div class="mb-4" style="display:none" id="TransferOfOwnershipRequirements">
                            <span style="white-space: pre-line">@ViewBag.RequiredDocsList_TransferOfOwnership</span>
                        </div>
                        <div class="gap-4 mb-5">
                            <h2 class="text-secondary fw-bold m-0">Attach Required Documents</h2>
                            <input asp-for="filesUpload.Files" type="file" class="file" multiple data-show-upload="false" data-allowed-file-extensions='["pdf"]' accept="application/pdf" data-show-caption="true" data-msg-placeholder="Select {files} for upload..."> <!-- onchange="fileChange(this)" -->
                        </div>                                               
                    </div>
                </div>
            </div>

            <div id="requiredDocForOwnerPermitsPartialContainer">
            </div>

            <div class="text-center mb-4">
                <small class="text-secondary fw-bold fst-italic">
                    By submitting this form, you agree to our <a href="@Url.Action("TermsPolicy", "Home")" target="_blank" class="text-decoration-none">Privacy Policy and Terms & Conditions.</a>
                </small>
            </div>
        <div class="d-flex justify-content-end pe-2 me-1">
                <button id="btnSubmit" type="button" class="btn btn-primary mb-4">Submit</button>
        </div>
        </form>
    </div>
</div>



<script src="/js/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@* <!-- Selectize -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/js/selectize.min.js" integrity="sha512-IOebNkvA/HZjMM7MxL0NYeLYEalloZ8ckak+NDtOViP7oiYzG5vn6WVXyrJDiJPhl4yRdmNAG49iuLmhkUdVsQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- End for Selectize --> *@

<script type="text/javascript">
    var isTransferOfOwnership = false;
    //Things to change depending on Permit Selection
    function permitSelection(that) {
        console.log("that.value: ", that.value);
        var permitTypeID = that.value;
        console.log("permitTypeID: ", permitTypeID);
        $('#requiredDocForOwnerPermitsPartialContainer').load('/ChainsawOwner/ChecklistForChainsawOwnerPartialView?permitTypeID=' + permitTypeID, function (data) {
            //Multiple Select
            $('.form-select.fileListDropDown').each(function () {
                //Initialize Selectize on the select element with the specified class

                var $select = $(this).selectize({
                    create: true,
                    placeholder: 'Please select your uploaded file',
                    plugins: ['remove_button'], // Enable the remove button
                })[0].selectize;


                $('.file').on('change', function (event) {
                    var files = event.target.files;
                    //var formFiles = document.forms['OwnerRegForm']['filesUpload.Files'];

                    $select.clear();
                    // Clear existing options
                    $select.clearOptions();
                    $select.addOption({ value: "N/A", text: "N/A" });
                    // Loop through each selected file
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        // Get the file name
                        var fileName = file.name;

                        // Add options based on the file name
                        //var options = fileName.split('.')[0].split('_');
                        var options = fileName.split('_');
                        options.forEach(function (option) {
                            option = option.trim();
                            if (option !== '') {
                                $select.addOption({ value: option, text: option });
                            }
                        });
                    }

                    // Refresh the Selectize control to update the UI
                    //$select.refreshOptions();
                });

                //If files were placed using drag and drop feature
                $(document).on('drop', '.file-drop-zone.clearfix', function () {
                    console.log("dropped");
                    $select.clear();
                    $select.clearOptions();

                    var formFiles = document.forms['OwnerRegForm']['filesUpload.Files'];
                    var files = formFiles.files;

                    $select.addOption({ value: "N/A", text: "N/A" });
                    // Loop through each selected file
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        // Get the file name
                        var fileName = file.name;

                        // Add options based on the file name
                        var options = fileName.split('_');
                        options.forEach(function (option) {
                            option = option.trim();
                            if (option !== '') {
                                $select.addOption({ value: option, text: option });
                            }
                        });
                    }

                });

                //If remove button of files will be clicked
                $(document).on('click', '.fileinput-remove-button', function () {
                    console.log("remove button clicked");
                    $select.clear();
                    $select.clearOptions();
                });

            });

            //End of Multiple Select
        });
        

        //remove files when changing permit type
        const removeFileButton = document.querySelector('.fileinput-remove-button');
        removeFileButton.click();

        if (that.value == 5 || that.value == 6 || that.value == 7) {
            //Authority To Lease/Rent/Lend is Selected
            document.getElementById("PermitToLeaseRentLendRequirements").style.display = "block";
            document.getElementById("TransferOfOwnershipRequirements").style.display = "none";
        }

        if (that.value == 14) {
            //Permit To Re-sell/Transfer of Ownership is Selected
            document.getElementById("TransferOfOwnershipRequirements").style.display = "block";
            document.getElementById("PermitToLeaseRentLendRequirements").style.display = "none";
            $("#NewEmailAddress").show();
            isTransferOfOwnership = true;
        }
        else {
            $("#NewEmailAddress").hide();
            isTransferOfOwnership = false;
        }
    }

    $(document).ready(function () {
                
        //MODAL FORM SUBMISSION CONFIRMATIONS
        const ownerPermitsRegform = document.getElementById('OwnerRegForm');
        $("#btnSubmit").click(function () {
            //Check if required fields are filled up
            if ($("#OwnerRegForm")[0].checkValidity()) {
                var formFiles = document.forms['OwnerRegForm']['filesUpload.Files'];

                var x = document.forms['OwnerRegForm']['Dataxxx'];

                x.value = JSON.stringify(applications);


                if (formFiles.files.length == 0) {
                    Swal.fire({
                        title: "No File Selected",
                        text: "Please upload the required documents to proceed with the application.",
                        icon: "error",
                        confirmButtonColor: '#14984a'
                    });
                }else if(applications.length == 0){
                    Swal.fire({
                        title: "No Supplier Information",
                        text: "Please add atleast one supplier information.",
                        icon: "error",
                        confirmButtonColor: '#14984a'
                    });
                    }
                else {
                    $('#confirmSubmitModal').modal("show"); //proceed to submit modal
                }
            }
            //If fields are not filled up
            else {
                //Validate Form
                $("#OwnerRegForm")[0].reportValidity();
            }
        });

        $("#backBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
        });

        $("#confirmBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
            ownerPermitsRegform.submit();
            if(isTransferOfOwnership) {
                $("#confirmTransferOfOwnershipSuccessModal").modal("show");
            }
            else {
                $("#confirmSuccessModal").modal("show");
            }
            $("#confirmSuccessModal").modal("show");

            
        });
        //END FOR MODAL FORM SUBMISSION CONFIRMATION

        
        let applications = [
            //{ ID: 1, SupplierName: 'Supplier 1', ExpectedTimeArrival: '2023-12-31T23:59' },
            //{ ID: 2, SupplierName: 'Supplier 2', ExpectedTimeArrival: '2023-12-25T18:00' }
            // More simulated data...
        ];
        function displayApplications() {
            let tableBody = $('#tableBody');
            tableBody.empty(); // Clear previous data
            applications.forEach(app => {
                let row = $('<tr>');
                row.append(`<td style="display:none;">${app.id}</td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_name" name="supplier_name">${app.supplier_name}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_address" name="supplier_address">${app.supplier_address}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="expected_time_arrival" name="expected_time_arrival">${app.expected_time_arrival}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="power_source" name="power_source">${app.power_source}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="unit_of_measure" name="unit_of_measure">${app.unit_of_measure}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="brand" name="brand">${app.brand}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="model" name="model">${app.model}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="engine_serialNo" name="engine_serialNo">${app.engine_serialNo}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="quantity" name="quantity">${app.quantity}</span></td>`);
                // Add other fields similarly...

                // Actions column with Edit and Delete buttons
                let actions = `<td>
                            <button  type="button" onclick="deleteApplication(${app.id})">Delete</button>
                                   </td>`;
                row.append(actions);

                tableBody.append(row);
            });
        }

        // Function to enable editing of a specific application
        window.enableEdit = function (id) {
            $(`.editable[data-id=${id}]`).prop('contenteditable', 'true').focus();
            $(this).prop('contenteditable', 'false').html(`<input type="text" class="datepicker" value="${$(this).text()}">`);


            //$(`.editable[data-id=${id}]`).each(function () {

            //    if (this.attributes.name.value == "ExpectedTimeArrival") {
            //        $(this).prop('contenteditable', 'false').html(`<input class="form-control" type="datetime-local" value="${$(this).text()}">`);
            //    }

            //});
        };

        // Function to update application data inline
        $(document).on('blur', '.editable', function () {
            let id = $(this).data('id');
            let field = $(this).data('field');
            let newValue = $(this).text();
            updateApplication(id, field, newValue);
        });

        function updateApplication(id, field, newValue) {
            let appIndex = applications.findIndex(app => app.ID === id);
            if (appIndex !== -1) {
                applications[appIndex][field] = newValue;
            }
        }

        // Function to delete an application
        window.deleteApplication = function (id) {
            let confirmDelete = confirm("Are you sure you want to delete this application?");
            if (confirmDelete) {
                applications = applications.filter(app => app.id !== id);
                displayApplications(); // Refresh the table after deletion
            }
        };



        $('#addRowButton').click(function () {
            //// Retrieve values from inputs
            //let id = $('#newId').val();
            //let supplierName = $('#newSupplierName').val();
            //let expectedTimeArrival = $('#newExpectedTimeArrival').val();
            //// Get other field values similarly

            //// Validation and error handling
            //if (!id || !supplierName || !expectedTimeArrival /* Add more validations */) {
            //    alert('Please fill in all fields.'); // Show an error message or handle as needed
            //    return;
            //}





        });

        // Function to clear the inline add row inputs
        function clearAddRow() {
            $('#newId').val('');
            $('#newSupplierName').val('');
            $('#newExpectedTimeArrival').val('');
            // Clear other inputs similarly
        }

        // Function to show/hide the inline add row
        $('#showAddRowButton').click(function () {
            //$('#addRow').toggle(); // Toggle visibility of the inline add row

            Swal.fire({
                title: 'Supplier Information',
                //html:
                //    'Supplier Name :<input id="supplierName" class="swal2-input" placeholder="Supplier Name">' +
                //    'Supplier Address:<input id="supplierAddress" class="swal2-input" placeholder="Supplier Address">' +
                //    'Expected Time Of Arrival :<input type="datetime-local" id="newExpectedTimeArrival2" placeholder="Expected Time Of Arrival" />' +
                //    'Power Source :<input id="powerSource" class="swal2-input" placeholder="Power Source">' +
                //    'Brand :<input id="brand" class="swal2-input" placeholder="Brand">' +
                //    'Model :<input id="model" class="swal2-input" placeholder="Model">' +
                //    'EngineSerialNo :<input id="engineSerialNo" class="swal2-input" placeholder="EngineSerialNo">' +
                //    'Quantity :<input type=number id="quantity" class="swal2-input" placeholder="Quantity">'
                //    ,
                html: `<div class="c-form-container">
<form>

    <div class="g-3">
        <div class="form-floating mb-3">
            <input type="text" class="form-control rounded-3" id="supplierName" placeholder="" />
            <label class="form-label">Supplier Name</label>
        </div>
    </div>
    <div class="g-3">
        <div class="form-floating mb-3">
            <input type="text" class="form-control rounded-3" id="supplierAddress" placeholder="" />
            <label class="form-label">Supplier Address</label>
        </div>
    </div>
    <div class="row">
    <div class="col-md-5 mb-3">
        <div class="form-floating">
            <input class="form-control rounded-3" type="datetime-local" id="newExpectedTimeArrival"
                placeholder="Expected Time Of Arrival" />
            <label class="form-label">Expected Time Of Arrival</label>
        </div>
    </div>
    <div class="col-md-4 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="powerSource" placeholder="" />
            <label class="form-label">Power Source</label>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="unitOfMeasure" placeholder="" />
            <label class="form-label">Unit of Measure</label>
        </div>
    </div>
    </div>
    <div class="row">
    <div class="col-md-4 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="brand" placeholder="" />
            <label class="form-label">Brand</label>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="model" placeholder="" />
            <label class="form-label">Model</label>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="engineSerialNo" placeholder="" />
            <label class="form-label">Engine Serial No.</label>
        </div>
    </div>
    <div class="col-md-2 mb-3">
        <div class="form-floating mb-3">
            <input type="number" class="form-control rounded-3" id="quantity" placeholder="" />
            <label class="form-label">Quantity</label>
        </div>
    </div>
    </div>
</form>
</div>`,
                width: '800px',
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Submit',
                preConfirm: () => {

                     //Swal.showValidationMessage('First input missing')   ;

      


                    if (document.getElementById('quantity').value == '')
                        Swal.showValidationMessage('Quantity field is required');
                               
                    if (document.getElementById('engineSerialNo').value == '')
                        Swal.showValidationMessage('Enginer Serial No. field is required');

                    if (document.getElementById('model').value == '')
                        Swal.showValidationMessage('Model field is required');

                    if (document.getElementById('brand').value == '')
                        Swal.showValidationMessage('Brand field is required');

                    //if (document.getElementById('newExpectedTimeArrival').value == '')
                    //    Swal.showValidationMessage('Expected Time of Arrival field is required');

                    if (document.getElementById('supplierAddress').value == '')
                        Swal.showValidationMessage('Suplier Address field is required');

                    if (document.getElementById('supplierName').value == '')
                        Swal.showValidationMessage('Suplier Name is required');
                    return [
                        document.getElementById('supplierName').value,
                        document.getElementById('supplierAddress').value,
                        document.getElementById('newExpectedTimeArrival').value,
                        document.getElementById('powerSource').value,
                        document.getElementById('unitOfMeasure').value,
                        document.getElementById('brand').value,
                        document.getElementById('model').value,
                        document.getElementById('engineSerialNo').value,
                        document.getElementById('quantity').value
                    ];
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const values = result.value;
                    const supplierName = values[0];
                    const supplierAddress = values[1];
                    const newExpectedTimeArrival = values[2];
                    const powerSource = values[3];
                    const unitOfMeasure = values[4];
                    const brand = values[5];
                    const model = values[6];
                    const engineSerialNo = values[7];
                    const quantity = values[8];
                    //console.log('Input 1:', value1);
                    //console.log('Input 2:', value2);
                    // Perform actions with the input values here

                    // Logic to add a new application (simulate adding here)
                    let newApp = {
                        id: applications.length,
                        supplier_name: supplierName,
                        supplier_address: supplierAddress,
                        expected_time_arrival: newExpectedTimeArrival,
                        power_source: powerSource,
                        unit_of_measure: unitOfMeasure,
                        brand: brand,
                        model: model,
                        engine_serialNo: engineSerialNo,
                        quantity: quantity
                        // Set other fields similarly
                    };
                    applications.push(newApp); // Simulate adding a new application

                    displayApplications(); // Refresh the table
                    clearAddRow(); // Clear the inline add row inputs
                }
            });

        });

        // Initial display of applications
        displayApplications();

        // $("#confirmBtn").click(function () {
        //     $("#confirmSubmitModal").modal("hide");
        //     $("#confirmSuccessModal").modal("show");
        // });

        

    });


    //FOR CHECKLIST OF DOCUMENTS
    function fileChange(that) {
        var formFiles = document.forms['OwnerRegForm']['filesUpload.Files'];
        //console.log("that: ", that);
        //console.log("that.value: ", that.value);
        // console.log("formFiles.files: ", formFiles.files);
        // console.log("formFiles.files.length: ", formFiles.files.length);
        // console.log("formFiles.files[0].name: ", formFiles.files[0].name);
        //console.log("filesUpload.Files", $('#filesUpload.Files').val());
        // for (let i = 0; i < formFiles.files.length; i++) {
        //     console.log("formFiles.files["+i+"].name: ", formFiles.files[i].name);
        // }
        PopulateFileDropDown(".fileListDropDown", formFiles.files);
    }

    function PopulateFileDropDown(fileDropDownClass, list) {
        $(fileDropDownClass).empty();
        $(fileDropDownClass).append("<option value=\"\" selected disabled>--Please select your uploaded file--</option>")
        $(fileDropDownClass).append("<option value=\"N/A\" >N/A</option>")
        $.each(list, function (index, row) {
            $(fileDropDownClass).append("<option value=\"" + row.name + "\"id=\"uploadedFile_" + index + "\">" + row.name + "</option>")
        });
    }

    function fileSelected(that) {
        var curval = that.dataset.curval;
        document.getElementById(that.id).setAttribute("data-prevVal", curval);
        document.getElementById(that.id).setAttribute("data-curVal", that.value);

        // var selectClass = document.getElementsByClassName('fileListDropDown');
        // for (let i = 0; i < selectClass.length; i++) {
        //     if (selectClass[i].id != that.id) {

        //         //CODE TO DISABLE OPTIONS
        //         var selectedFileList = document.getElementById(selectClass[i].id);
        //         for (let j = 0; j < selectedFileList.options.length; j++) {
        //             if (selectedFileList.options[j].value == that.value) {
        //                 if (that.value != "N/A") {
        //                     //Disable options with the same selected value
        //                     selectedFileList.options[j].disabled = true;
        //                 }
        //             }
        //             if (selectedFileList.options[j].value == that.dataset.prevval) {
        //                 //Enable options based on prev value
        //                 selectedFileList.options[j].disabled = false;
        //             }
        //         }
        //     }
        // }
    }
        //END FOR CHECKLIST OF DOCUMENTS
    //const formOwner = document.getElementById('OwnerRegForm');
    //const showModalButton = document.getElementById('btnSubmit');
    //const confirmationModal = document.getElementById('confirmSubmitModal');
    //const confirmButton = document.getElementById('confirmBtn');

    // Function to display the modal
    // function showModal() {
    //     confirmationModal.style.display = 'block';
    // }

    // // Function to hide the modal
    // function hideModal() {
    //     confirmationModal.style.display = 'none';
    // }

    // // Event listener for the "Submit" button
    // showModalButton.addEventListener('click', showModal);

    // // Event listener for the "Confirm" button
    // confirmButton.addEventListener('click', function () {
    //     // Submit the form when the "Confirm" button is clicked
    //     formOwner.submit();
    // });

    // // Close the modal when the user clicks outside of it
    // window.addEventListener('click', function (event) {
    //     if (event.target === confirmationModal) {
    //         hideModal();
    //     }
    // });

</script>

<style>
    textarea {
        resize: none;
    }
    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }

    .app-card {
        position: relative;
        background: #fff;
        border-radius: 0.25rem;
    }

    .app-card-doc .app-card-thumb-holder {
        background: #e9eaf1;
        text-align: center;
        position: relative;
        height: 112px;
    }

        .app-card-doc .app-card-thumb-holder .icon-holder {
            font-size: 40px;
            display: inline-block;
            margin: 0 auto;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #fff;
            padding-top: 10px;
        }

    .app-card .app-card-link-mask {
        position: absolute;
        width: 100%;
        height: 100%;
        display: block;
        left: 0;
        top: 0;
    }

    .app-card .app-card-body.has-card-actions {
        position: relative;
        padding-right: 1rem !important;
    }

    .app-card-doc .app-doc-meta {
        font-size: .75rem;
    }
</style>