@using System.Security.Claims;
@model FMB_CIS.Models.ViewModel
@{
    Layout = "~/Views/Shared/_MainPageLayout.cshtml";
    ViewBag.Title = "Chainsaw Import Permit Application";
}

<div id="card-container">
    <div id="card">
        @if (ViewBag.message != null)
        {
            <div class="alert alert-success" role="alert">
                @ViewBag.message
            </div>
        }
        <form asp-action="Index" method="post" enctype="multipart/form-data" id="ImporterRegForm">
            <a href="@Url.Action("Index", "Dashboard")" class="mx-2" title="back"><i data-feather="arrow-left" class="text-secondary backBtn"></i></a>
            <table class="table" id="applicationTable">
                <!-- Table headers -->
                <thead>
                    <tr>
                        @*   <th>ID</th>*@
                        <th>Supplier Name</th>
                        <th>Supplier Address</th>
                        <th>Expected Time Of Arrival</th>
                        <th>PowerSource</th>
                        <th>UnitOfMeasure</th>
                        <th>Brand</th>
                        <th>Model</th>
                        <th>EngineSerialNo</th>
                        <th>Quantity</th>
                        <!-- ... Other headers ... -->
                        <th>Actions</th>
                    </tr>
                </thead>
                <!-- Table body for displaying and editing data -->
                <tbody id="tableBody">
                    <!-- Rows with data will be dynamically added here -->
                    @* @foreach (tbl_application_group item in Model.tbl_Application_Group)
                    {
                    //    var folder = Model.uid + "_" + Model.appid;
                    @Html.EditorFor(item => item.SupplierName)
                    @Html.EditorFor(item => .Property2)
                    }*@


                </tbody>

                <!-- Inline add row -->
                <tfoot>
                    <tr id="addRow" style="display:none;">
                        <td><input type="text" id="newId" /></td>
                        <td><input type="text" id="newSupplierName" /></td>
                        <td><input type="datetime-local" id="newExpectedTimeArrival" /></td>
                        <!-- ... Other fields ... -->
                        <td>
                            <button id="addRowButton" type="button">Add</button>
                        </td>
                    </tr>
                </tfoot>
            </table>

            <input type="file" asp-for="tbl_Application_Group" multiple hidden />

            <div class="row m-0 mb-4">
                <div class="col-md-12" style="padding-top: 40px;">
                    <button id="showAddRowButton" type="button" class="btn btn-primary w-125" style="float:right;">Add Supplier</button>
                </div>
            </div>
            <input type="text" asp-for="Dataxxx" multiple hidden />


            <div class="row m-0 mb-4">
                <div class="col-md-12">
                    <div class="p-4 shadow h-100">
                        <div class="mb-4">
                            <span style="white-space: pre-line">@ViewBag.RequiredDocsList</span>
                        </div>
                        @* <div class="d-flex gap-4 mb-5">
                        <h2 class="text-secondary fw-bold m-0">Attach Required Documents</h2>
                        <label asp-for="filesUpload.Files" class="btn btn-primary custom-file-upload">
                        <i data-feather="upload"></i> Upload
                        </label>
                        <input type="file" asp-for="filesUpload.Files" class="form-control file" accept="application/pdf" id="filesUpload_Files" multiple hidden />
                        <button type="button" class="btn btn-primary"><i data-feather="upload"></i> Upload</button>
                        </div>
                        <div class="d-flex mb-4 gap-3 output">
                        Cards for files
                        <p id="files-area">
                        <span id="filesList">
                        <span id="files-names"></span>
                        </span>
                        </p>
                        </div> *@

                        @* <input id="testDragAndDrop" name="testDragAndDrop" type="file" class="file" multiple data-show-upload="false" data-show-caption="true" data-msg-placeholder="Select {files} for upload..."> *@
                        <div class="gap-4 mb-5">
                            <h2 class="text-secondary fw-bold m-0">Attach Required Documents</h2>
                            <input asp-for="filesUpload.Files" type="file" class="file" multiple data-show-upload="false" data-allowed-file-extensions='["pdf"]' accept="application/pdf" data-show-caption="true" data-msg-placeholder="Select {files} for upload..." onchange="fileChange(this)">
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row d-flex justify-content-center m-0">
                <h5 class="text-secondary">Please match your uploaded file based on the checklist of requirements.</h5>
                <table class="table dataTable" id="tblApplicantFiles">
                    <thead>
                        <tr>
                            <th>
                                Required Document
                            </th>
                            <th>
                                Uploaded Document
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 0;
                        }
                        @foreach (tbl_document_checklist item in Model.tbl_Document_Checklist)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.name)
                                    @* <a href="#" data-fileID="@item.tbl_files_id" data-fileName="@item.filename" onclick="DocHistory(this)">@item.filename</a> *@
                                </td>
                                <input type="hidden" asp-for="fileChecklistViewModel[i].tbl_document_checklist_id" value="@item.id" />
                                <td>
                                    <select class="form-select fileListDropDown" id="fileListDropDown_@i" data-prevVal="" data-curVal="" onchange="fileSelected(this)" asp-for="fileChecklistViewModel[i].FileName" required>
                                        <option selected disabled>--Please select your uploaded file--</option>
                                    </select>
                                </td>
                                @{
                                    i++;
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="text-center mb-4">
                <small class="text-secondary fw-bold fst-italic">
                    By submitting this form, you agree to our <a href="@Url.Action("TermsPolicy", "Home")" target="_blank" class="text-decoration-none">Privacy Policy and Terms & Conditions.</a>
                </small>
            </div>

            <button type="button" id="btnSubmit" class="btn btn-primary w-125" style="float:right;">Submit</button>
        </form>
    </div>
</div>

<script src="/js/jquery-3.7.1.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script type="text/javascript">

    const formIndex = document.getElementById('ImporterRegForm');

    $(document).ready(function () {

        //$('#applicationTable').DataTable({
        //    dom: 'Bfrtip',
        //    buttons: ['csv']
        //});


        //if ($.fn.dataTable.isDataTable('#applicationTable')) {
        //    table.clear();
        //    table.destroy();
        //    var x = 0;
        //}
        //else {
        //    table.clear();
        //    table.destroy();

        //    table = $('#applicationTable').DataTable({
        //        paging: false,
        //        buttons: ['csv']
        //    });
        //}

        //$('#applicationTable').DataTable({
        //    destroy: true,
        //    order: [[0, 'desc']],
        //    dom: 'Bfrtip',
        //    buttons: ['csv']
        //});


        // //FILE UPLOAD
        // const dt = new DataTransfer();

        // $(".file").on("change", function (e) {



        //     // Get the selected file(s)
        //     console.log($('#filesUpload.Files').val());
        //     var selectedFiles = $(this).prop("files");
        //     console.log(selectedFiles);
        //     var fafile = "";
        //     // Clear the previous output
        //     //$(".output").empty();

        //     var duplicatedFiles = [];

        //     var validFiles = [];


        //     // Display file information in the specified format
        //     for (var i = 0; i < this.files.length; i++) {

        //         var hasdup = false;

        //         for (var x = 0; x < dt.files.length; x++) {

        //              if (dt.files[x].name == selectedFiles[i].name) {
        //                 //Swal.fire({
        //                 //    title: "Duplicate File",
        //                 //    text: "You have uploaded a duplicate file " + dt.files[0].name,
        //                 //    icon: "error"
        //                 //});
        //                 duplicatedFiles.push(selectedFiles[i].name)
        //               //  selectedFiles.splice(i, 1);
        //                 hasdup = true;
        //             }
        //         }

        //         if(!hasdup){
        //             validFiles.push(selectedFiles[i]);
        //         }

        //     }

        //     if(duplicatedFiles.length > 0){


        //         var errorsHtml = "";
        //         const list = document.createElement('ul');
        //         for (var x = 0; x < duplicatedFiles.length; x++) {

        //             const listItem = document.createElement('li');
        //             listItem.innerHTML = duplicatedFiles[x] + "<br/>";
        //             list.appendChild(listItem);
        //         }

        //         Swal.fire({
        //             title: "Duplicate File",
        //             text: "You have uploaded a duplicate file " + dt.files[0].name,
        //             icon: "error",
        //             html: list,
        //             confirmButtonColor: '#14984a'
        //         });
        //     }




        //     // Display file information in the specified format
        //     for (var i = 0; i < validFiles.length; i++) {
        //         //ifelse for fa-file type
        //         if (validFiles[i].type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
        //             fafile = "fa-file-word"
        //         }
        //         else if (validFiles[i].type == "application/pdf") {
        //             fafile = "fa-file-pdf"
        //         }
        //         else if (validFiles[i].type == "image/jpeg") {
        //             fafile = "fa-file-image"
        //         }
        //         else {
        //             fafile = "fa-file"
        //         }
        //         // Create div elements and set their classes and content
        //         var cardDiv = $("<div>").addClass("card mw-18rem ").attr('id', validFiles[i].name);
        //         var fileDiv = $("<div>").addClass("card-body");
        //         var fileIcon = $("<i>").addClass("fas " + fafile + " text-light-green fs-1 mb-3");
        //         var dropdownIcon = $("<i>").addClass("fas fa-ellipsis-v cursor-pointer fs-3 position-absolute end-0 me-3 text-secondary").attr({
        //             "data-bs-toggle": "dropdown",
        //             "aria-expanded": "false"
        //         });
        //         var dropdownMenu = $("<ul>").addClass("dropdown-menu").append(
        //             $("<li>").append($("<a>").addClass("dropdown-item").attr("href", "#").text("View")),
        //             $("<li>").append($("<a>").addClass("dropdown-item file-delete").attr("href", "#").text("Delete")),
        //             $("<li>").append($("<a>").addClass("dropdown-item").attr("href", "#").text("Download"))
        //         );
        //         var fileName = $("<h6>").addClass("card-title text-secondary").text(validFiles[i].name);
        //         var fileInfoList = $("<ul>").addClass("list-unstyled small mb-0").append(
        //             $("<li>").append($("<span>").addClass("text-muted").text("type: " + validFiles[i].type)),
        //             $("<li>").append($("<span>").addClass("text-muted").text("size: " + (validFiles[i].size / 1024).toFixed(2) + "kb")),
        //             $("<li>").append($("<span>").addClass("text-muted").text("uploaded: " + new Date().toLocaleDateString()))
        //         );

        //         // Append created elements to the fileDiv
        //         fileDiv.append(fileIcon, dropdownIcon, dropdownMenu, fileName, fileInfoList);

        //         // Append the fileDiv to the cardDiv
        //         cardDiv.append(fileDiv);

        //         // Append the cardDiv to the output div
        //         $(".output").append(cardDiv);
        //     }
        //     for (let file of validFiles) {
        //         dt.items.add(file);
        //     }

        //     selectedFiles = dt.files;
        //     console.log(selectedFiles);


        //     $('.file-delete').click(function () {
        //         let name = $(this).closest('.card').attr('id');
        //         // Supprimer l'affichage du nom de fichier
        //         //$(this).parent().remove();
        //         document.getElementById(name).remove()
        //         for (let i = 0; i < dt.items.length; i++) {
        //             // Correspondance du fichier et du nom
        //             if (name === dt.items[i].getAsFile().name) {
        //                 // Suppression du fichier dans l'objet DataTransfer
        //                 dt.items.remove(i);
        //                 continue;
        //             }
        //         }
        //         // Mise à jour des fichiers de l'input file après suppression
        //         selectedFiles = dt.files;
        //     });

        //     this.value = null;
        // });

        // //END FOR FILE UPLOAD

        //BRB
        // const dt = new DataTransfer();

        // $(".file").fileinput({
        //     //uploadUrl: "/file-upload-single/1",
        //     //uploadUrl: "https://localhost:7270/ChainsawImporter/filedelete",
        //     // uploadUrl: " ",
        //     enableResumableUpload: true,
        //     overwriteInitial: false,
        // });

        // $(".file").on("change", function (e) {
        //     console.log("this", this.files);
        //     //console.log("myDropzone.files",myDropzone.files);
        // });
        // $(".file-drop-zone").on("change", function (e) {
        //     console.log("this", this.files);
        // });

        // $('.file-drop-zone').on('drop', function (e) {
        //     console.log("this", this);
        //     console.log("e", e);
        //     console.log("e", e.originalEvent.dataTransfer.files);
        //     dt.files = e.originalEvent.dataTransfer.files;
        //     console.log("dt.files: ", dt.files);
        //     var cFile = document.getElementsByClassName("file");
        //     console.log("cFile.files", cFile.files)
        // });


        $("#btnSubmit").click(function () {

            // //Check if user selected some files
            // //If user doesn't select any files
            // if (dt.files.length == 0) {
            //     console.log("dt.files.length = 0");
            //     Swal.fire({
            //         title: "No File Selected",
            //         text: "Please upload the required documents to proceed with the application.",
            //         icon: "error",
            //         confirmButtonColor: '#14984a'
            //     });
            // }
            // //If User selected a file
            // else
            // {

            //Check if required fields are filled up
            if ($("#ImporterRegForm")[0].checkValidity()) {

                var formFiles = document.forms['ImporterRegForm']['filesUpload.Files'];
                console.log("formFiles: ", formFiles);
                console.log("formFiles.files: ", formFiles.files);
                console.log("formFiles.files.length: ", formFiles.files.length);

                var x = document.forms['ImporterRegForm']['Dataxxx'];

                x.value = JSON.stringify(applications);
                //formFiles.files = dt.files;
                if (formFiles.files.length == 0) {
                    Swal.fire({
                        title: "No File Selected",
                        text: "Please upload the required documents to proceed with the application.",
                        icon: "error",
                        confirmButtonColor: '#14984a'
                    });
                }
                // else if (formFiles.files.length < @Model.tbl_Document_Checklist.Count() && formFiles.files.length !=0) {
                //     Swal.fire({
                //         title: "Incomplete Documents",
                //         text: "Based on the requirements, you need to upload a total of " + @Model.tbl_Document_Checklist.Count() + " documents to proceed. Please re-upload again. Thank you!",
                //         icon: "error",
                //         confirmButtonColor: '#14984a'
                //     });
                // }
                else {
                    $('#confirmSubmitModal').modal("show"); //proceed to submit modal
                }
            }
            //If fields are not filled up
            else {
                //Validate Form
                $("#ImporterRegForm")[0].reportValidity();
            }
            //}

        });



        $("#backBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
        });

        $("#confirmBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
            formIndex.submit();
            $("#confirmSuccessModal").modal("show");
            console.log("submit success");
        });

        let applications = [
            //{ ID: 1, SupplierName: 'Supplier 1', ExpectedTimeArrival: '2023-12-31T23:59' },
            //{ ID: 2, SupplierName: 'Supplier 2', ExpectedTimeArrival: '2023-12-25T18:00' }
            // More simulated data...
        ];
        function displayApplications() {
            let tableBody = $('#tableBody');
            tableBody.empty(); // Clear previous data
            applications.forEach(app => {
                let row = $('<tr>');
                row.append(`<td style="display:none;">${app.id}</td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_name" name="supplier_name">${app.supplier_name}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_address" name="supplier_address">${app.supplier_address}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="expected_time_arrival" name="expected_time_arrival">${app.expected_time_arrival}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="power_source" name="power_source">${app.power_source}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="unit_of_measure" name="unit_of_measure">${app.unit_of_measure}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="brand" name="brand">${app.brand}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="model" name="model">${app.model}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="engine_serialNo" name="engine_serialNo">${app.engine_serialNo}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="quantity" name="quantity">${app.quantity}</span></td>`);
                // Add other fields similarly...

                // Actions column with Edit and Delete buttons
                let actions = `<td>
                            <button  type="button" onclick="deleteApplication(${app.id})">Delete</button>
                                   </td>`;
                row.append(actions);

                tableBody.append(row);
            });
        }

        // Function to enable editing of a specific application
        window.enableEdit = function (id) {
            $(`.editable[data-id=${id}]`).prop('contenteditable', 'true').focus();
            $(this).prop('contenteditable', 'false').html(`<input type="text" class="datepicker" value="${$(this).text()}">`);


            //$(`.editable[data-id=${id}]`).each(function () {

            //    if (this.attributes.name.value == "ExpectedTimeArrival") {
            //        $(this).prop('contenteditable', 'false').html(`<input class="form-control" type="datetime-local" value="${$(this).text()}">`);
            //    }

            //});
        };

        // Function to update application data inline
        $(document).on('blur', '.editable', function () {
            let id = $(this).data('id');
            let field = $(this).data('field');
            let newValue = $(this).text();
            updateApplication(id, field, newValue);
        });

        function updateApplication(id, field, newValue) {
            let appIndex = applications.findIndex(app => app.ID === id);
            if (appIndex !== -1) {
                applications[appIndex][field] = newValue;
            }
        }

        // Function to delete an application
        window.deleteApplication = function (id) {
            let confirmDelete = confirm("Are you sure you want to delete this application?");
            if (confirmDelete) {
                applications = applications.filter(app => app.id !== id);
                displayApplications(); // Refresh the table after deletion
            }
        };



        $('#addRowButton').click(function () {
            //// Retrieve values from inputs
            //let id = $('#newId').val();
            //let supplierName = $('#newSupplierName').val();
            //let expectedTimeArrival = $('#newExpectedTimeArrival').val();
            //// Get other field values similarly

            //// Validation and error handling
            //if (!id || !supplierName || !expectedTimeArrival /* Add more validations */) {
            //    alert('Please fill in all fields.'); // Show an error message or handle as needed
            //    return;
            //}





        });

        // Function to clear the inline add row inputs
        function clearAddRow() {
            $('#newId').val('');
            $('#newSupplierName').val('');
            $('#newExpectedTimeArrival').val('');
            // Clear other inputs similarly
        }

        // Function to show/hide the inline add row
        $('#showAddRowButton').click(function () {
            //$('#addRow').toggle(); // Toggle visibility of the inline add row

            Swal.fire({
                title: 'Supplier Information',
                //html:
                //    'Supplier Name :<input id="supplierName" class="swal2-input" placeholder="Supplier Name">' +
                //    'Supplier Address:<input id="supplierAddress" class="swal2-input" placeholder="Supplier Address">' +
                //    'Expected Time Of Arrival :<input type="datetime-local" id="newExpectedTimeArrival2" placeholder="Expected Time Of Arrival" />' +
                //    'Power Source :<input id="powerSource" class="swal2-input" placeholder="Power Source">' +
                //    'Brand :<input id="brand" class="swal2-input" placeholder="Brand">' +
                //    'Model :<input id="model" class="swal2-input" placeholder="Model">' +
                //    'EngineSerialNo :<input id="engineSerialNo" class="swal2-input" placeholder="EngineSerialNo">' +
                //    'Quantity :<input type=number id="quantity" class="swal2-input" placeholder="Quantity">'
                //    ,
                html: `<form class="form-horizontal" style="margin-top: 20px;">
                                    <div class="form-group">
                                                <div style="width:726px;padding-top:5px;">
                                                   <label style="float:left; line-height: 40px;padding-right: 75px;">Supplier Name</label>
                                                   <input style="display:inline-block;width: 500px;" id="supplierName" class="form-control">
                                                </div>
                                    </div>
                                    <div class="form-group">
                                                <div style="width:726px;padding-top:5px;">
                                                                    <label style="float:left; line-height: 40px;padding-right: 58px;">Supplier Address</label>
                                                                    <input style="display:inline-block;width: 500px;" id="supplierAddress" class="form-control">
                                                            </div>
                                        </div>

                                              <div class="form-group">
                                                                <div style="width:726px;padding-top:5px;">
                                                                            <label style="float:left; line-height: 40px;">Expected Time Of Arrival</label>
                                                                                   <input class="form-control" type="datetime-local" id="newExpectedTimeArrival" placeholder="Expected Time Of Arrival" style="display:inline-block;width: 500px;" />
                                                                </div>
                                            </div>

                                                    <div class="form-group">
                                                                <div style="width:726px;padding-top:5px;">
                                                                            <label style="float:left; line-height: 40px;padding-right: 88px;">Power Source</label>
                                                                        <input style="display:inline-block;width: 500px;" id="powerSource" class="form-control">
                                                                </div>
                                            </div>

                                             <div class="form-group">
                                                                <div style="width:726px;padding-top:5px;">
                                                                            <label style="float:left; line-height: 40px;padding-right: 70px;">Unit of Measure</label>
                                                                        <input style="display:inline-block;width: 500px;" id="unitOfMeasure" class="form-control">
                                                                </div>
                                            </div>


                                                <div class="form-group">
                                                                    <div style="width:726px;padding-top:5px;">
                                                                                <label style="float:left; line-height: 40px;padding-right: 150px;">Brand</label>
                                                                            <input style="display:inline-block;width: 500px;" id="brand" class="form-control">
                                                                    </div>
                                                </div>
                                                    <div class="form-group">
                                                                        <div style="width:726px;padding-top:5px;">
                                                                                    <label style="float:left; line-height: 40px;padding-right: 145px;">Model</label>
                                                                                <input style="display:inline-block;width: 500px;" id="model" class="form-control">
                                                                        </div>
                                                    </div>
                                                            <div class="form-group">
                                                                        <div style="width:726px;padding-top:5px;">
                                                                                    <label style="float:left; line-height: 40px;padding-right: 60px;">Engine Serial No.</label>
                                                                                <input style="display:inline-block;width: 500px;" id="engineSerialNo" class="form-control">
                                                                        </div>
                                                    </div>
                                                        <div class="form-group">
                                                                            <div style="width:726px;padding-top:5px;">
                                                                                        <label style="float:left; line-height: 40px;padding-right: 127px;">Quantity</label>
                                                                                    <input style="display:inline-block;width: 500px;" id="quantity" class="form-control">
                                                                            </div>
                                                        </div>

                          </form>`,
                width: '800px',
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Submit',
                preConfirm: () => {
                    return [
                        document.getElementById('supplierName').value,
                        document.getElementById('supplierAddress').value,
                        document.getElementById('newExpectedTimeArrival').value,
                        document.getElementById('powerSource').value,
                        document.getElementById('unitOfMeasure').value,
                        document.getElementById('brand').value,
                        document.getElementById('model').value,
                        document.getElementById('engineSerialNo').value,
                        document.getElementById('quantity').value
                    ];
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const values = result.value;
                    const supplierName = values[0];
                    const supplierAddress = values[1];
                    const newExpectedTimeArrival = values[2];
                    const powerSource = values[3];
                    const unitOfMeasure = values[4];
                    const brand = values[5];
                    const model = values[6];
                    const engineSerialNo = values[7];
                    const quantity = values[8];
                    //console.log('Input 1:', value1);
                    //console.log('Input 2:', value2);
                    // Perform actions with the input values here

                    // Logic to add a new application (simulate adding here)
                    let newApp = {
                        id: applications.length,
                        supplier_name: supplierName,
                        supplier_address: supplierAddress,
                        expected_time_arrival: newExpectedTimeArrival,
                        power_source: powerSource,
                        unit_of_measure: unitOfMeasure,
                        brand: brand,
                        model: model,
                        engine_serialNo: engineSerialNo,
                        quantity: quantity
                        // Set other fields similarly
                    };
                    applications.push(newApp); // Simulate adding a new application

                    displayApplications(); // Refresh the table
                    clearAddRow(); // Clear the inline add row inputs
                }
            });

        });

        // Initial display of applications
        displayApplications();

    });

    //FOR CHECKLIST OF DOCUMENTS
    function fileChange(that) {
        var formFiles = document.forms['ImporterRegForm']['filesUpload.Files'];
        //console.log("that: ", that);
        //console.log("that.value: ", that.value);
        // console.log("formFiles.files: ", formFiles.files);
        // console.log("formFiles.files.length: ", formFiles.files.length);
        // console.log("formFiles.files[0].name: ", formFiles.files[0].name);
        //console.log("filesUpload.Files", $('#filesUpload.Files').val());
        // for (let i = 0; i < formFiles.files.length; i++) {
        //     console.log("formFiles.files["+i+"].name: ", formFiles.files[i].name);
        // }
        PopulateFileDropDown(".fileListDropDown", formFiles.files);
    }

    function PopulateFileDropDown(fileDropDownClass, list) {
        $(fileDropDownClass).empty();
        $(fileDropDownClass).append("<option value=\"\" selected disabled>--Please select your uploaded file--</option>")
        $(fileDropDownClass).append("<option value=\"N/A\" >N/A</option>")
        $.each(list, function (index, row) {
            $(fileDropDownClass).append("<option value=\"" + row.name + "\"id=\"uploadedFile_" + index + "\">" + row.name + "</option>")
        });
    }

    function fileSelected(that) {
        // console.log("that.dataset.:", that.dataset);
        var curval = that.dataset.curval;
        document.getElementById(that.id).setAttribute("data-prevVal", curval);
        document.getElementById(that.id).setAttribute("data-curVal", that.value);

        // console.log("that.id:", that.id);
        var selectClass = document.getElementsByClassName('fileListDropDown');
        // for (let i = 0; i < selectClass.length; i++) {
        //     if (selectClass[i].id != that.id) {
        //         //hide
        //         // console.log("i: ", i);
        //         // console.log("that.id: ", that.id);
        //         // console.log("selectClass[" + i + "].id: ", selectClass[i].id);
        //         // console.log("selectClass.length: ", selectClass.length);

        //         //CODE TO DISABLE OPTIONS
        //         var selectedFileList = document.getElementById(selectClass[i].id);
        //         for (let j = 0; j < selectedFileList.options.length; j++) {
        //             //console.log("selectedFileList.options[" + j + "]: ", selectedFileList.options[j]);
        //             if (selectedFileList.options[j].value == that.value) {
        //                 //console.log("disable me");
        //                 if (that.value != "N/A") {
        //                     //Disable options with the same selected value
        //                     selectedFileList.options[j].disabled = true;
        //                 }

        //             }
        //             if (selectedFileList.options[j].value == that.dataset.prevval) {
        //                 //Enable options based on prev value
        //                 selectedFileList.options[j].disabled = false;
        //             }
        //         }
        //     }
        // }
    }
        //END FOR CHECKLIST OF DOCUMENTS

</script>

<style>

    h2#swal2-title {
        font-size: 30px;
    }

    textarea {
        resize: none;
    }

    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }

    .app-card {
        position: relative;
        background: #fff;
        border-radius: 0.25rem;
    }

    .app-card-doc .app-card-thumb-holder {
        background: #e9eaf1;
        text-align: center;
        position: relative;
        height: 112px;
    }

        .app-card-doc .app-card-thumb-holder .icon-holder {
            font-size: 40px;
            display: inline-block;
            margin: 0 auto;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #fff;
            padding-top: 10px;
        }

    .app-card .app-card-link-mask {
        position: absolute;
        width: 100%;
        height: 100%;
        display: block;
        left: 0;
        top: 0;
    }

    .app-card .app-card-body.has-card-actions {
        position: relative;
        padding-right: 1rem !important;
    }

    .app-card-doc .app-doc-meta {
        font-size: .75rem;
    }
</style>