﻿@using System.Security.Claims;
@model FMB_CIS.Models.ViewModel

@{
    Layout = "~/Views/Shared/_MainPageLayout.cshtml";
    ViewBag.Title = "New Permit to Purchase Application";
}

<div id="card-container">
    <div id="card">
        @if (ViewBag.message != null)
        {
            <div class="alert alert-success" role="alert">
                @ViewBag.message
            </div>
        }

       
        <form asp-action="PermitToPurchase" method="post" enctype="multipart/form-data" id="PermitToPurchaseRegForm">
            <a href="@Url.Action("Index", "Dashboard")" class="mx-2" title="back"><i data-feather="arrow-left" class="text-secondary backBtn"></i></a>
             <h2 class="text-secondary fw-bold mb-4">Permit to Purchase</h2>
        <table class="table" id="applicationTable">
                <!-- Table headers -->
                <thead>
                    <tr>
                        @*   <th>ID</th>*@
                        <th>Supplier Name</th>
                        <th>Supplier Address</th>
                        <th>PowerSource</th>
                        @* <th>UnitOfMeasure</th> *@
                        <th>Brand</th>
                        <th>Model</th>
                        <th>EngineSerialNo</th>
                        <th>Quantity</th>
                        <!-- ... Other headers ... -->
                        <th>Actions</th>
                    </tr>
                </thead>
                <!-- Table body for displaying and editing data -->
                <tbody id="tableBody">
                    <!-- Rows with data will be dynamically added here -->
                    @* @foreach (tbl_application_group item in Model.tbl_Application_Group)
                    {
                    //    var folder = Model.uid + "_" + Model.appid;
                    @Html.EditorFor(item => item.SupplierName)
                    @Html.EditorFor(item => .Property2)
                    }*@


                </tbody>

                <!-- Inline add row -->
                <tfoot>
                    <tr id="addRow" style="display:none;">
                        <td><input type="text" id="newId" /></td>
                        <td><input type="text" id="newSupplierName" /></td>
                        <td><input type="datetime-local" id="newExpectedTimeArrival" /></td>
                        <!-- ... Other fields ... -->
                        <td>
                            <button id="addRowButton" type="button">Add</button>
                        </td>
                    </tr>
                </tfoot>
            </table>

            <input type="file" asp-for="tbl_Application_Group" multiple hidden />

            <div class="row m-0 mb-4">
                <div class="col-md-12" style="padding-top: 40px;">
                    <button id="showAddRowButton" type="button" class="btn btn-primary w-125" style="float:right;">Add Supplier</button>
                </div>
            </div>
            <input type="text" asp-for="Dataxxx" multiple hidden />

            <div class="row m-0 mb-4">
                <div class="col-md-12">
                    <div class="p-4 shadow h-100">
                        <div class="mb-4" id="PermitToPurchaseRequirements">
                            <span class="c-preline" style="white-space: pre-line">@ViewBag.RequiredDocsList_PermitToPurchase</span>
                        </div>
                        @* <div class="mb-4" style="display:none" id="PermitToSellRequirements">
                        <span style="white-space: pre-line">@ViewBag.RequiredDocsList_PermitToSell</span>
                        </div>
                        <div class="mb-4" style="display:none" id="PermitToPurchaseRequirements">
                        <span style="white-space: pre-line">@ViewBag.RequiredDocsList_PermitToPurchase</span>
                        </div> *@
                        <div class="gap-4 mb-5">
                            <h2 class="text-secondary fw-bold m-0">Attach Required Documents</h2>
                            <div class="alert alert-warning mt-3 mb-3" role="alert">
                                <ul style="margin-bottom: 0px;">
                                    <li>When uploading multiple files, drag all files at once on the field.</li>
                                    <li>Only alphanumeric characters (A-Z), (a-z), (0-9), underscores (_), and hyphen (-) are allowed for filenames. Spaces are not allowed. Please rename before uploading.</li>
                                </ul>
                            </div>
                            <input asp-for="filesUpload.Files" type="file" class="file" multiple data-show-upload="false" data-allowed-file-extensions='["pdf"]' accept="application/pdf" data-show-caption="true" data-msg-placeholder="Select {files} for upload..."> <!-- onchange="fileChange(this)" -->
                        </div>
                        
                    </div>
                </div>
            </div>

            <hr />
            <div class="row d-flex justify-content-center m-0">
                <h5 class="text-secondary">Please match your uploaded file based on the checklist of requirements.</h5>
                <table class="table dataTable" id="tblApplicantFiles">
                    <thead>
                        <tr>
                            <th>
                                Required Document
                            </th>
                            <th>
                                Uploaded Document
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 0;
                        }
                        @foreach (tbl_document_checklist item in Model.tbl_Document_Checklist)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.name)
                                    @* <a href="#" data-fileID="@item.tbl_files_id" data-fileName="@item.filename" onclick="DocHistory(this)">@item.filename</a> *@
                                </td>
                                <input type="hidden" asp-for="fileChecklistViewModel[i].tbl_document_checklist_id" value="@item.id" />
                                <td>
                                    <select class="form-select fileListDropDown" id="fileListDropDown_@i" data-prevVal="" data-curVal="" onchange="fileSelected(this)" asp-for="fileChecklistViewModel[i].FileNames" multiple required>
                                    </select>
                                </td>
                                @{
                                    i++;
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="text-center mb-4">
                <small class="text-secondary fw-bold fst-italic">
                    By submitting this form, you agree to our <a href="@Url.Action("TermsPolicy", "Home")" target="_blank" class="text-decoration-none">Privacy Policy and Terms & Conditions.</a>
                </small>
            </div>
            <div class="d-flex justify-content-end pe-2 me-1">
                <button type="button" id="btnSubmit" class="btn btn-primary mb-4">Submit</button>
            </div>
        </form>
    </div>
</div>





<script src="/js/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Selectize -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/js/selectize.min.js" integrity="sha512-IOebNkvA/HZjMM7MxL0NYeLYEalloZ8ckak+NDtOViP7oiYzG5vn6WVXyrJDiJPhl4yRdmNAG49iuLmhkUdVsQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.13.3/js/standalone/selectize.min.js"></script> *@
<!-- End for Selectize -->
<script type="text/javascript">

    //Things to change depending on Permit Selection
    // function permitSelection(that) {
    //     if (that.value == 2) {
    //         //Permit To Sell is Selected
    //         document.getElementById("PermitToSellRequirements").style.display = "block";
    //         document.getElementById("PermitToPurchaseRequirements").style.display = "none";
    //     }

    //     else if (that.value == 3) {
    //         //Permit To Purchase is Selected
    //         document.getElementById("PermitToPurchaseRequirements").style.display = "block";
    //         document.getElementById("PermitToSellRequirements").style.display = "none";
    //     }
    // }

    $(document).ready(function () {

        //MODAL FORM SUBMISSION CONFIRMATIONS
        const permitToPurchRegform = document.getElementById('PermitToPurchaseRegForm');
        $("#btnSubmit").click(function () {

            //Check if required fields are filled up
            if ($("#PermitToPurchaseRegForm")[0].checkValidity()) {
                var formFiles = document.forms['PermitToPurchaseRegForm']['filesUpload.Files'];

                      var x = document.forms['PermitToPurchaseRegForm']['Dataxxx'];

                x.value = JSON.stringify(applications);


                if (formFiles.files.length == 0) {
                    Swal.fire({
                        title: "No File Selected",
                        text: "Please upload the required documents to proceed with the application.",
                        icon: "error",
                        confirmButtonColor: '#14984a'
                    });
                }else if(applications.length == 0){
                    Swal.fire({
                        title: "No Supplier Information",
                        text: "Please add atleast one supplier information.",
                        icon: "error",
                        confirmButtonColor: '#14984a'
                    });
                    }
                else {
                    $('#confirmSubmitModal').modal("show"); //proceed to submit modal
                }
            }
            //If fields are not filled up
            else {
                //Validate Form
                $("#PermitToPurchaseRegForm")[0].reportValidity();
            }
        });

        $("#backBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
        });

        $("#confirmBtn").click(function () {
            $("#confirmSubmitModal").modal("hide");
            permitToPurchRegform.submit();
            $("#confirmSuccessModal").modal("show");
        });
        $("#finalOKBtn").click(function () {
            $("#confirmSuccessModal").modal("hide");
        });
        //END FOR MODAL FORM SUBMISSION CONFIRMATION


          let applications = [
            //{ ID: 1, SupplierName: 'Supplier 1', ExpectedTimeArrival: '2023-12-31T23:59' },
            //{ ID: 2, SupplierName: 'Supplier 2', ExpectedTimeArrival: '2023-12-25T18:00' }
            // More simulated data...
        ];
        function displayApplications() {
            let tableBody = $('#tableBody');
            tableBody.empty(); // Clear previous data
            applications.forEach(app => {
                let row = $('<tr>');
                row.append(`<td style="display:none;">${app.id}</td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_name" name="supplier_name">${app.supplier_name}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="supplier_address" name="supplier_address">${app.supplier_address}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="power_source" name="power_source">${app.power_source}</span></td>`);
                //row.append(`<td><span class="editable" data-id="${app.id}" data-field="unit_of_measure" name="unit_of_measure">${app.unit_of_measure}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="brand" name="brand">${app.brand}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="model" name="model">${app.model}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="engine_serialNo" name="engine_serialNo">${app.engine_serialNo}</span></td>`);
                row.append(`<td><span class="editable" data-id="${app.id}" data-field="quantity" name="quantity">${app.quantity}</span></td>`);
                // Add other fields similarly...

                // Actions column with Edit and Delete buttons
                let actions = `<td>
                            <button  type="button" onclick="deleteApplication(${app.id})">Delete</button>
                                   </td>`;
                row.append(actions);

                tableBody.append(row);
            });
        }

        // Function to enable editing of a specific application
        window.enableEdit = function (id) {
            $(`.editable[data-id=${id}]`).prop('contenteditable', 'true').focus();
            $(this).prop('contenteditable', 'false').html(`<input type="text" class="datepicker" value="${$(this).text()}">`);


            //$(`.editable[data-id=${id}]`).each(function () {

            //    if (this.attributes.name.value == "ExpectedTimeArrival") {
            //        $(this).prop('contenteditable', 'false').html(`<input class="form-control" type="datetime-local" value="${$(this).text()}">`);
            //    }

            //});
        };

        // Function to update application data inline
        $(document).on('blur', '.editable', function () {
            let id = $(this).data('id');
            let field = $(this).data('field');
            let newValue = $(this).text();
            updateApplication(id, field, newValue);
        });

        function updateApplication(id, field, newValue) {
            let appIndex = applications.findIndex(app => app.ID === id);
            if (appIndex !== -1) {
                applications[appIndex][field] = newValue;
            }
        }

        // Function to delete an application
        window.deleteApplication = function (id) {
            let confirmDelete = confirm("Are you sure you want to delete this application?");
            if (confirmDelete) {
                applications = applications.filter(app => app.id !== id);
                displayApplications(); // Refresh the table after deletion
            }
        };



        $('#addRowButton').click(function () {
            //// Retrieve values from inputs
            //let id = $('#newId').val();
            //let supplierName = $('#newSupplierName').val();
            //let expectedTimeArrival = $('#newExpectedTimeArrival').val();
            //// Get other field values similarly

            //// Validation and error handling
            //if (!id || !supplierName || !expectedTimeArrival /* Add more validations */) {
            //    alert('Please fill in all fields.'); // Show an error message or handle as needed
            //    return;
            //}





        });

        // Function to clear the inline add row inputs
        function clearAddRow() {
            $('#newId').val('');
            $('#newSupplierName').val('');
            $('#newExpectedTimeArrival').val('');
            // Clear other inputs similarly
        }

        // Function to show/hide the inline add row
        $('#showAddRowButton').click(function () {
            //$('#addRow').toggle(); // Toggle visibility of the inline add row

            Swal.fire({
                title: 'Supplier Information',
                //html:
                //    'Supplier Name :<input id="supplierName" class="swal2-input" placeholder="Supplier Name">' +
                //    'Supplier Address:<input id="supplierAddress" class="swal2-input" placeholder="Supplier Address">' +
                //    'Expected Time Of Arrival :<input type="datetime-local" id="newExpectedTimeArrival2" placeholder="Expected Time Of Arrival" />' +
                //    'Power Source :<input id="powerSource" class="swal2-input" placeholder="Power Source">' +
                //    'Brand :<input id="brand" class="swal2-input" placeholder="Brand">' +
                //    'Model :<input id="model" class="swal2-input" placeholder="Model">' +
                //    'EngineSerialNo :<input id="engineSerialNo" class="swal2-input" placeholder="EngineSerialNo">' +
                //    'Quantity :<input type=number id="quantity" class="swal2-input" placeholder="Quantity">'
                //    ,
                html: `<div class="c-form-container">
<form>

    <div class="g-3">
        <div class="form-floating mb-3">
            <input type="text" class="form-control rounded-3" id="supplierName" placeholder="" />
            <label class="form-label">Supplier Name</label>
        </div>
    </div>
    <div class="g-3">
        <div class="form-floating mb-3">
            <input type="text" class="form-control rounded-3" id="supplierAddress" placeholder="" />
            <label class="form-label">Supplier Address</label>
        </div>
    </div>
    <div class="row">
    <div class="col-md-6 mb-3">
        <div class="form-floating">
            <input class="form-control rounded-3" type="date" id="xxx" placeholder="Expected Time Of Arrival" />
            <label class="form-label">Expected Time Of Arrival</label>
        </div>
    </div>
    <div class="col-md-6 mb-3">
        <div class="form-floating">
                <select id="powerSource" class="form-select" >
                    <option value="Electric">Electric</option>
                    <option value="Gas">Gas</option>
                    <option value="Battery">Battery</option>
                </select>
            <label class="form-label">Power Source</label>
        </div>
    </div>
    </div>
    <div class="row">
    <div class="col-md-4 mb-3">
        <div class="form-floating">
            <select id="brand" class="form-select" >
                    <option value="stihl">Stilh</option>
                    <option value="makita">Makita</option>
                    <option value="hitachi">Hitachi</option>
            </select>
            <label class="form-label">Brand</label>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="model" placeholder="" />
            <label class="form-label">Model</label>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="form-floating">
            <input type="text" class="form-control rounded-3" id="engineSerialNo" placeholder="" />
            <label class="form-label">Engine Serial No.</label>
        </div>
    </div>
    <div class="col-md-2 mb-3">
        <div class="form-floating mb-3">
            <input type="number" class="form-control rounded-3" id="quantity" placeholder="" />
            <label class="form-label">Quantity</label>
        </div>
    </div>
    </div>
</form>
</div>`,
                width: '800px',
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonColor: '#14984a',
                confirmButtonText: 'Submit',
                preConfirm: () => {

                     //Swal.showValidationMessage('First input missing')   ;

      


                    if (document.getElementById('quantity').value == '')
                        Swal.showValidationMessage('Quantity field is required');
                               
                    if (document.getElementById('engineSerialNo').value == '')
                        Swal.showValidationMessage('Enginer Serial No. field is required');

                    if (document.getElementById('model').value == '')
                        Swal.showValidationMessage('Model field is required');

                    if (document.getElementById('brand').value == '')
                        Swal.showValidationMessage('Brand field is required');

                    //if (document.getElementById('newExpectedTimeArrival').value == '')
                    //    Swal.showValidationMessage('Expected Time of Arrival field is required');

                    if (document.getElementById('supplierAddress').value == '')
                        Swal.showValidationMessage('Suplier Address field is required');

                    if (document.getElementById('supplierName').value == '')
                        Swal.showValidationMessage('Suplier Name is required');
                    return [
                        document.getElementById('supplierName').value,
                        document.getElementById('supplierAddress').value,
                        document.getElementById('xxx').value,
                        document.getElementById('powerSource').value,
                        //document.getElementById('unitOfMeasure').value,
                        document.getElementById('brand').value,
                        document.getElementById('model').value,
                        document.getElementById('engineSerialNo').value,
                        document.getElementById('quantity').value
                    ];
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const values = result.value;
                    const supplierName = values[0];
                    const supplierAddress = values[1];
                    const newExpectedTimeArrival = values[2];
                    const powerSource = values[3];
                    //const unitOfMeasure = values[4];
                    const brand = values[4];
                    const model = values[5];
                    const engineSerialNo = values[6];
                    const quantity = values[7];
                    //console.log('Input 1:', value1);
                    //console.log('Input 2:', value2);
                    // Perform actions with the input values here

                    // Logic to add a new application (simulate adding here)
                    let newApp = {
                        id: applications.length,
                        supplier_name: supplierName,
                        supplier_address: supplierAddress,
                        expected_time_arrival: newExpectedTimeArrival,
                        power_source: powerSource,
                        //unit_of_measure: unitOfMeasure,
                        brand: brand,
                        model: model,
                        engine_serialNo: engineSerialNo,
                        quantity: quantity
                        // Set other fields similarly
                    };
                    applications.push(newApp); // Simulate adding a new application

                    displayApplications(); // Refresh the table
                    clearAddRow(); // Clear the inline add row inputs
                }
            });

        });

        // Initial display of applications
        displayApplications();
    });
        
    //Multiple Select
    $('.form-select.fileListDropDown').each(function () {
        //Initialize Selectize on the select element with the specified class

        var $select = $(this).selectize({
            create: true,
            placeholder: 'Please select your uploaded file',
            plugins: ['remove_button'], // Enable the remove button
        })[0].selectize;


        $('.file').on('change', function (event) {
            var files = event.target.files;
            //var formFiles = document.forms['PermitToPurchaseRegForm']['filesUpload.Files'];

            $select.clear();
            // Clear existing options
            $select.clearOptions();
            $select.addOption({ value: "N/A", text: "N/A" });
            // Loop through each selected file
            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                // Get the file name
                var fileName = file.name;

                //Check if filename contains special characters
                if (fileName.search(/(?:\.(?![^.]+$)|[^\w.-])+/g) >= 0) {
                    Swal.fire({
                        icon: "error",
                        title: "File name not allowed!",
                        text: "Only upload filenames without special characters and spaces. Only alphanumeric characters (A-Z), (a-z), (0-9), underscores (_), and hyphen (-) are allowed ",
                        confirmButtonColor: '#14984a'
                    });
                    const removeFileButton = document.querySelector('.fileinput-remove-button');
                    removeFileButton.click();
                    $select.clear();
                    $select.clearOptions();
                    break;
                }
                else {
                    // Add options based on the file name
                    $select.addOption({ value: fileName, text: fileName });
                }
            }

            // Refresh the Selectize control to update the UI
            //$select.refreshOptions();
        });

        //If files were placed using drag and drop feature
        $(document).on('drop', '.file-drop-zone.clearfix', function () {
            console.log("dropped");
            $select.clear();
            $select.clearOptions();

            var formFiles = document.forms['PermitToPurchaseRegForm']['filesUpload.Files'];
            var files = formFiles.files;

            $select.addOption({ value: "N/A", text: "N/A" });
            // Loop through each selected file
            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                // Get the file name
                var fileName = file.name;

                //Check if filename contains special characters
                if (fileName.search(/(?:\.(?![^.]+$)|[^\w.-])+/g) >= 0) {
                    Swal.fire({
                        icon: "error",
                        title: "File name not allowed!",
                        text: "Only upload filenames without special characters and spaces. Only alphanumeric characters (A-Z), (a-z), (0-9), underscores (_), and hyphen (-) are allowed ",
                        confirmButtonColor: '#14984a'
                    });
                    const removeFileButton = document.querySelector('.fileinput-remove-button');
                    removeFileButton.click();
                    $select.clear();
                    $select.clearOptions();
                    break;
                }
                else {
                    // Add options based on the file name
                    $select.addOption({ value: fileName, text: fileName });
                }
            }

        });

        //If remove button of files will be clicked
        $(document).on('click', '.fileinput-remove-button', function () {
            console.log("remove button clicked");
            $select.clear();
            $select.clearOptions();
        });

    });

    //End of Multiple Select

    //FOR CHECKLIST OF DOCUMENTS
    function fileChange(that) {
        var formFiles = document.forms['PermitToPurchaseRegForm']['filesUpload.Files'];
        PopulateFileDropDown(".fileListDropDown", formFiles.files);
    }

    function PopulateFileDropDown(fileDropDownClass, list) {
        $(fileDropDownClass).empty();
        $(fileDropDownClass).append("<option value=\"\" selected disabled>--Please select your uploaded file--</option>")
        $(fileDropDownClass).append("<option value=\"N/A\" >N/A</option>")
        $.each(list, function (index, row) {
            $(fileDropDownClass).append("<option value=\"" + row.name + "\"id=\"uploadedFile_" + index + "\">" + row.name + "</option>")
        });
    }

    function fileSelected(that) {
        var curval = that.dataset.curval;
        document.getElementById(that.id).setAttribute("data-prevVal", curval);
        document.getElementById(that.id).setAttribute("data-curVal", that.value);

        // var selectClass = document.getElementsByClassName('fileListDropDown');
        // for (let i = 0; i < selectClass.length; i++) {
        //     if (selectClass[i].id != that.id) {

        //         //CODE TO DISABLE OPTIONS
        //         var selectedFileList = document.getElementById(selectClass[i].id);
        //         for (let j = 0; j < selectedFileList.options.length; j++) {
        //             if (selectedFileList.options[j].value == that.value) {
        //                 if (that.value != "N/A") {
        //                     //Disable options with the same selected value
        //                     selectedFileList.options[j].disabled = true;
        //                 }
        //             }
        //             if (selectedFileList.options[j].value == that.dataset.prevval) {
        //                 //Enable options based on prev value
        //                 selectedFileList.options[j].disabled = false;
        //             }
        //         }
        //     }
        // }
    }
    
    //END FOR CHECKLIST OF DOCUMENTS



</script>

<style>
    textarea {
        resize: none;
    }

    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }

    .app-card {
        position: relative;
        background: #fff;
        border-radius: 0.25rem;
    }

    .app-card-doc .app-card-thumb-holder {
        background: #e9eaf1;
        text-align: center;
        position: relative;
        height: 112px;
    }

        .app-card-doc .app-card-thumb-holder .icon-holder {
            font-size: 40px;
            display: inline-block;
            margin: 0 auto;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #fff;
            padding-top: 10px;
        }

    .app-card .app-card-link-mask {
        position: absolute;
        width: 100%;
        height: 100%;
        display: block;
        left: 0;
        top: 0;
    }

    .app-card .app-card-body.has-card-actions {
        position: relative;
        padding-right: 1rem !important;
    }

    .app-card-doc .app-doc-meta {
        font-size: .75rem;
    }
</style>